{"version":3,"sources":["Form/Form.js","Header/Header.js","Blogs/Blog/Tag/Tag.js","Blogs/Blog/Blog.js","CustomSnackbar/CustomSnackbar.js","Blogs/Blogs.js","Shared/baseURL.js","Footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","useState","pages","disabled","formState","setFormState","handler","onSubmit","e","preventDefault","className","TextField","size","label","type","inputProps","min","onChange","target","value","Button","variant","color","Header","title","AppBar","position","Toolbar","Typography","style","textAlign","margin","Tag","tag","ListItem","ListItemIcon","ListItemText","disableTypography","primary","html","Blog","blog","Paper","name","List","tags","map","Alert","elevation","CustomSnackbar","open","message","severity","openState","setOpenState","useEffect","handleClose","event","reason","Snackbar","autoHideDuration","onClose","anchorOrigin","vertical","horizontal","Blogs","blogs","setBlogs","errState","setErrState","a","axios","get","data","fetchData","console","log","CircularProgress","marginLeft","marginRight","fontSize","Link","href","Fab","App","setPages","colo","_pages","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.a7c484bf.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { Button } from '@material-ui/core';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport './Form.css'\r\n\r\nexport default function Form(props) {\r\n\r\n  const [ formState, setFormState] = useState({pages: 0, disabled:true});\r\n  const { handler } = props;\r\n  \r\n  const handleSubmit = (e) => {\r\n    handler(formState.pages);\r\n    e.preventDefault();\r\n  }\r\n\r\n  const handleChange = (e) => {\r\n    let pages = e.target.value;\r\n    setFormState({\r\n      pages: pages, disabled: !(pages > 0)\r\n    });\r\n  }\r\n\r\n  return (\r\n    <div onSubmit={ handleSubmit }>\r\n      <h2 className=\"label\">Parse each tag from each blog on risingstack.blog</h2>\r\n      <form className=\"formContainer\">\r\n        <TextField \r\n          size=\"medium\"\r\n          label=\"Number of pages\" \r\n          type=\"number\" \r\n          inputProps = { { min: 0} }\r\n          onChange={ handleChange }\r\n        />\r\n        <Button \r\n          variant=\"contained\" \r\n          color=\"primary\"\r\n          disabled={ formState.disabled }\r\n          type=\"submit\">\r\n            Scrape Pages\r\n        </Button>\r\n      </form>\r\n    </div>\r\n  );\r\n}","import React from \"react\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\n\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport \"./Header.css\";\r\n\r\nexport default function Header(props) {\r\n  const { color, title, variant } = props;\r\n\r\n  return (\r\n    <AppBar position=\"static\" color={color}>\r\n      <Toolbar>\r\n        <Typography className=\"autoMargin\" variant={variant} style={{textAlign: 'center',margin:'auto'}}>\r\n          {title}\r\n        </Typography>\r\n      </Toolbar>\r\n    </AppBar>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport \"./Tag.css\";\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport LocalOfferIcon from '@material-ui/icons/LocalOffer';\r\n\r\nexport default function Tag(props) {\r\n  const { tag } = props;\r\n  return (\r\n    <ListItem>\r\n      <ListItemIcon>\r\n        <LocalOfferIcon />\r\n      </ListItemIcon>\r\n      <ListItemText\r\n        disableTypography\r\n        primary={\r\n          <Typography variant=\"h6\" style={{ color: \"#000000\" }}>\r\n            {tag.html}\r\n          </Typography>\r\n        }\r\n      />\r\n    </ListItem>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nimport Paper from '@material-ui/core/Paper';\r\nimport List from '@material-ui/core/List';\r\n\r\nimport \"./Blog.css\";\r\nimport Header from '../../Header/Header';\r\nimport Tag from './Tag/Tag';\r\n\r\nexport default function Blog(props) {\r\n    const { blog } = props;\r\n\r\n   return (\r\n       <Paper className=\"blogContainer\"> \r\n           <Header title={blog.name} color={\"primary\"} variant=\"h6\"/>\r\n           <List className=\"tagContainer\">\r\n                {blog.tags.map(tag => <Tag tag={tag}/>)}\r\n           </List>\r\n       </Paper>\r\n   );\r\n}","import React, { useState, useEffect } from \"react\";\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport MuiAlert from \"@material-ui/lab/Alert\";\r\n\r\nfunction Alert(props) {\r\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nexport default function CustomSnackbar(props) {\r\n  const { open, message, severity } = props;\r\n  const [openState, setOpenState] = useState(open);\r\n\r\n  useEffect(() => setOpenState(props.open), [props.open]);\r\n\r\n  const handleClose = (event, reason) => {\r\n    if (reason === \"clickaway\") {\r\n      return;\r\n    }\r\n    setOpenState(false);\r\n  };\r\n\r\n  return (\r\n    <Snackbar\r\n      open={openState}\r\n      autoHideDuration={6000}\r\n      onClose={handleClose}\r\n      className=\"snackBar\"\r\n      anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\r\n    >\r\n      <Alert onClose={handleClose} severity={severity}>\r\n        {message}\r\n      </Alert>\r\n    </Snackbar>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport axios from \"axios\";\r\n\r\nimport \"./Blogs.css\";\r\nimport Blog from \"./Blog/Blog\";\r\nimport CustomSnackbar from '../CustomSnackbar/CustomSnackbar';\r\nimport { BASE_URL } from \"../Shared/baseURL\";\r\n\r\nexport default function Blogs(props) {\r\n  const { pages } = props;\r\n  const [blogs, setBlogs] = useState(null);\r\n  const [errState, setErrState] = useState(null);\r\n\r\n  const fetchBlogs = () => {\r\n    setBlogs(null);\r\n    setErrState(null);\r\n\r\n    const fetchData = async () => {\r\n      try {\r\n        const { data } = await axios.get(`${BASE_URL}api/pages/${pages}`);\r\n        setBlogs(data);\r\n      } catch (e) {\r\n        setErrState(e);\r\n      }\r\n    };\r\n    fetchData();\r\n  };\r\n\r\n  useEffect(fetchBlogs, [props.pages]);\r\n\r\n  if(errState){\r\n    return (\r\n      <div>\r\n          <CustomSnackbar severity=\"error\" message=\"Something went wrong :(\" open={true}/>\r\n          {console.log(errState)}\r\n      </div>\r\n    );\r\n  }\r\n  else if (!blogs) {\r\n    return <CircularProgress size={100} />;\r\n  } else {\r\n    return (\r\n        <div className=\"container\">\r\n            <CustomSnackbar severity=\"success\" message='Blogs parsed successfully' open={true}/>\r\n            {blogs.map((blog) => <Blog blog={blog} />)}\r\n        </div>\r\n    )\r\n  }\r\n}\r\n","export const BASE_URL = 'http://localhost:3000/';","import React from \"react\";\r\nimport \"./Footer.css\";\r\n\r\nimport Fab from '@material-ui/core/Fab';\r\nimport NavigationIcon from '@material-ui/icons/Navigation';\r\nimport GitHubIcon from '@material-ui/icons/GitHub';\r\nimport Link from '@material-ui/core/Link';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nexport default function Tag() {\r\n  return (\r\n    <div className=\"footer\">\r\n        <div className=\"githubPage\">\r\n            <GitHubIcon style={{marginLeft: \"10px\", marginRight: \"5px\"}} color=\"primary\" fontSize=\"large\"/>\r\n            <Typography>\r\n              <Link href=\"https://github.com/norbertkovacs95\" >\r\n              https://github.com/norbertkovacs95\r\n              </Link>\r\n            </Typography>\r\n        </div>\r\n        <Fab color=\"secondary\"  href={'#'} className=\"fab\" style={{marginRight: \"10px\"}}>\r\n            <NavigationIcon />\r\n        </Fab>\r\n    </div>\r\n  );\r\n}","import React, { useState } from \"react\";\nimport \"./App.css\";\n\nimport Form from \"./Form/Form\";\nimport Header from \"./Header/Header\";\nimport Blogs from \"./Blogs/Blogs\";\nimport Footer from './Footer/Footer';\n\nfunction App() {\n  const [pages, setPages] = useState(0);\n  const handleFormSubmit = (_pages) => {\n    setPages(_pages);\n  };\n\n  return (\n    <div className=\"App\">\n      <Header title={\"Blog Parser\"} colo={\"primary\"} variant=\"h5\" />\n      <div className=\"mainContent\">\n        <Form handler={handleFormSubmit} />\n        {pages > 0 && <Blogs pages={pages} />}\n      </div>\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}